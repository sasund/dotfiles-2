# Debug
snippet log
	console.log({ ${0} });

snippet debug
	console.log(${0:root}.debug());

# ES6/Next
snippet imp
	import ${0} from '${1}';
snippet cf
	const ${1:function_name} = (${2}) => {
	  ${0:${VISUAL}}
	}

# Flow
snippet flow
	/* @flow */
snippet Pr
	type Props = {|
	  ${0}
	|};
snippet IPr
	type InternalProps = {|
	  ...Props,
	  ${0}
	|};

# SinonJS
snippet notcalled
	sinon.assert.notCalled(${0});
snippet called
	sinon.assert.called(${0});
snippet callcount
	sinon.assert.callCount(${1}, ${2:1});
snippet calledwith
	sinon.assert.calledWith(${1}, ${0});

# React
snippet func
	/* @flow */
	import * as React from 'react';

	type Props = {|
	  ${2}
	|};

	const ${1:Component} = (props: Props) => (
	  ${0}
	);

	export default ${4:$1};
snippet cl
	/* @flow */
	import * as React from 'react';

	type Props = {|
	|};

	class ${1:Component}Base extends React.Component<Props> {

	  render() {
	    return (
		  ${0:<div />}
		);
	  }
	}

	const ${2:$1}: React.ComponentType<Props> = ${3:$1};

	export default ${4:$2};
snippet constr
	constructor(props: Props) {
	  super(props);

	  ${0}
	}
snippet bind
	(this: any).${1:fn} = this.${2:$1}.bind(this);

# Jest/Mocha
snippet fdesc
	describe(__filename, () => {
	  ${0}
	});
snippet desc
	describe('${1}', () => {
	  ${0}
	});
snippet it
	it('${1}', () => {
	  ${0}
	});
snippet toL
	expect(${0}).toHaveLength(${1:1});
snippet toP
	expect(${0}).toHaveProp(${1:1});
snippet root
	const root = render();
